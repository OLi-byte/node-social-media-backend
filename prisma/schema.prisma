// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  username            String       @unique
  email               String       @unique
  password            String
  profile_picture_url String?
  bio                 String?      @db.Text
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  isAdmin             Boolean      @default(false)
  posts               Post[]
  likes               Like[]
  comments            Comment[]
  friends             Friendship[] @relation("UserFriendsAsUser")
  friendOf            Friendship[] @relation("UserFriendsAsFriend")

  @@map("users")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  image_url String?
  userId    Int
  User      User      @relation(fields: [userId], references: [id])
  likes     Like[]
  comments  Comment[]

  @@map("posts")
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])

  @@map("likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Friendship {
  id       Int    @id @default(autoincrement())
  userId   Int
  friendId Int
  status   String
  user     User   @relation("UserFriendsAsUser", fields: [userId], references: [id])
  friend   User   @relation("UserFriendsAsFriend", fields: [friendId], references: [id])

  @@unique([userId, friendId])
  @@unique([friendId, userId])
  @@index([userId, friendId])
  @@index([friendId, userId])
  @@map("friendships")
}
