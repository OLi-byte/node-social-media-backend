// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  username               String          @unique
  email                  String          @unique
  password               String
  profile_picture_url    String?
  bio                    String?         @db.Text
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  isAdmin                Boolean         @default(false)
  posts                  Post[]
  likes                  Like[]
  comments               Comment[]
  friends                Friendship[]    @relation("friends")
  friendsOf              Friendship[]    @relation("friendsOf")
  notifications          Notification[]
  friendRequestsSent     FriendRequest[] @relation("SentRequests")
  relatedNotifications   Notification[]  @relation("relatedUser")
  friendRequestsReceived FriendRequest[] @relation("ReceivedRequests")

  @@map("users")
}

model Post {
  id           Int            @id @default(autoincrement())
  title        String
  content      String         @db.Text
  image_url    String?
  published    Boolean        @default(false)
  userId       Int
  User         User           @relation(fields: [userId], references: [id])
  likes        Like[]
  comments     Comment[]
  notification Notification[]

  @@map("posts")
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])

  @@map("likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model FriendRequest {
  senderId   Int
  receiverId Int
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  sender     User                @relation("SentRequests", fields: [senderId], references: [id])
  receiver   User                @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@id([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@map("friendsResquests")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  friendOfId Int
  friendId   Int
  friendOf   User     @relation("friendsOf", fields: [friendOfId], references: [id])
  friend     User     @relation("friends", fields: [friendId], references: [id])
  createdAt  DateTime @default(now())

  @@id([friendOfId, friendId])
  @@map("friends")
}

model Notification {
  id            Int              @id @default(autoincrement())
  userId        Int
  type          NotificationType
  relatedPostId Int?
  relatedUserid Int?
  message       String?
  isRead        Boolean          @default(false)
  createdAt     DateTime         @default(now())
  relatedPost   Post?            @relation(fields: [relatedPostId], references: [id])
  relatedUser   User?            @relation("relatedUser", fields: [relatedUserid], references: [id])
  user          User             @relation(fields: [userId], references: [id])
}

enum NotificationType {
  like
  comment
  friendship
  message
}
